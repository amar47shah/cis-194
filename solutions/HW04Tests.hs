module HW04Tests where

import HW04
import Testing

-- Exercise 2 -----------------------------------------

ex2Tests :: [Test]
ex2Tests = [ testF2 "equality test" (==)
             [ (P []         , P [0]        , True)
             , (P [0,0]      , P [0]        , True)
             , (P [1,2,3]    , P [1,2,3]    , True)
             , (P [1,2,3]    , P [1,2,4]    , False)
             , (P [0,1,2]    , P [1,2]      , False)
             , (P [0,1,2]    , P [0,1,2,0,0], True)
             , (P [0,1,0]    , P [0,1,0,0]  , True)
             , (P [0,1,0,0,0], P [0,1]      , True)
             ]
           ]

-- Exercise 3 -----------------------------------------

ex3Tests :: [Test]
ex3Tests = [ testF1 "show test" show
             [ (P []       , "0")
             , (P [0]      , "0")
             , (P [1]      , "1")
             , (P [-1]     , "-1")
             , (P [5]      , "5")
             , (P [0,0]    , "0")
             , (P [0,1]    , "x")
             , (P [0,-1]   , "-x")
             , (P [0,5]    , "5x")
             , (P [-3,5]   , "5x + -3")
             , (P [0,0,1]  , "x^2")
             , (P [1,0,1]  , "x^2 + 1")
             , (P [1,0,5]  , "5x^2 + 1")
             , (P [1,0,0,2], "2x^3 + 1")
             , (P [0,-1,2] , "2x^2 + -x")
             ]
           ]

-- Exercise 4 -----------------------------------------

ex4Tests :: [Test]
ex4Tests = [ testF2 "plus test" plus
             [ (P [0], P [0], P [0])
             , (P [1], P [3], P [4])
             , (P [0,1], P [1,3], P [1,4])
             , (P [0,1,3], P [1,3], P [1,4,3])
             , (P [0,1], P [1,4,3,2], P [1,5,3,2])
             ]
           ]

-- Exercise 5 -----------------------------------------

ex5Tests :: [Test]
ex5Tests = [ testF2 "times test" times
             [ (P [0], P [0], P [0])
             , (P [0], P [1,2,3], P [0])
             , (P [1,2,3], P [0], P [0])
             , (P [2], P [1,2], P [2,4])
             , (P [1,2], P [2], P [2,4])
             , (P [2], P [0,1], P [0,2])
             , (P [0,1], P [2], P [0,2])
             , (P [1,2], P [2,3], P [2,7,6])
             , (P [2,3], P [1,2], P [2,7,6])
             , (P [0,0,2], P [1,2,3], P [0,0,2,4,6])
             , (P [1,2,3], P [0,0,2], P [0,0,2,4,6])
             ]
           ]

-- Exercise 6 -----------------------------------------

ex6Tests :: [Test]
ex6Tests = [ testF1 "negate test" negate
             [ (P [0], P [0])
             , (P [1], P [-1])
             , (P [-1], P [1])
             , (P [1,2,3], P[-1,-2,-3])
             , (P[-1,-2,-3], P [1,2,3])
             , (P [-1,2,-3], P [1,-2,3])
             ]
           ]

-- Exercise 7 -----------------------------------------

ex7Tests :: [Test]
ex7Tests = [ testF2 "applyP test" applyP
             [ (P [0], 0, 0)
             , (P [0,2,3], 0, 0)
             , (P [5], 1, 5)
             , (P [5], -3, 5)
             , (P [0,1], 2, 2)
             , (P [0,1], -3, -3)
             , (P [1,1,1], 1, 3)
             , (P [1,1,1], -1, 1)
             , (P [1,1,1], 2, 7)
             , (P [1,1,1], -2, 3)
             ]
           ]

-- All Tests ------------------------------------------

allTests :: [Test]
allTests = concat [ ex2Tests
                  , ex3Tests
                  , ex4Tests
                  , ex5Tests
                  , ex6Tests
                  , ex7Tests
                  ]
